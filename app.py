import streamlit as st
import os
import pandas as pd
from datetime import datetime

st.set_page_config(page_title="‡∞™‡∞≤‡±ç‡∞≤‡±Ü ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Å", page_icon="üåæ", layout="centered")

st.title("üåæ ‡∞™‡∞≤‡±ç‡∞≤‡±Ü ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Å ‚Äì ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞µ‡∞æ‡∞∞‡∞ø ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤ ‡∞ï‡±ã‡∞∂‡∞Ç")
st.markdown("‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£ ‡∞ó‡±ç‡∞∞‡∞æ‡∞Æ‡±Ä‡∞£‡±Å‡∞≤ ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Å, ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤‡±Å, ‡∞ï‡∞•‡∞≤‡±Å ‚Äî ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø, ‡∞Æ‡∞®‡∞Ç ‡∞ï‡∞æ‡∞™‡∞æ‡∞°‡±Å‡∞ï‡±Å‡∞Ç‡∞¶‡∞æ‡∞Ç!")

# Initialize CSV path
DATA_FILE = "palle_matala_data.csv"
UPLOAD_FOLDER = "uploads"

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Form
with st.form("submit_form"):
    st.subheader("üìù ‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø")

    proverb = st.text_input("üëâ ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§ / ‡∞Æ‡∞æ‡∞ü")
    meaning = st.text_area("üí° ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç")
    usage = st.text_area("üìò ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£ ‡∞µ‡∞æ‡∞ï‡±ç‡∞Ø‡∞Ç")

    extra_story = st.text_area("üìñ ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞®‡±á ‡∞Æ‡∞∞‡±ã ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§ ‡∞≤‡±á‡∞¶‡∞æ ‡∞ï‡∞• (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)", placeholder="‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...")
    
    audio_file = st.file_uploader("üîä ‡∞â‡∞ö‡±ç‡∞õ‡∞æ‡∞∞‡∞£ ‡∞´‡±à‡∞≤‡±ç (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç - .mp3 / .wav)", type=["mp3", "wav"])

    submitted = st.form_submit_button("‚úÖ ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø")

    if submitted:
        if proverb.strip() == "" or meaning.strip() == "" or usage.strip() == "":
            st.warning("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§, ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£ ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø‡∞∏‡∞∞‡∞ø‡∞ó‡∞æ ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.")
        else:
            # Save audio
            audio_filename = ""
            if audio_file is not None:
                timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
                audio_filename = f"{UPLOAD_FOLDER}/{timestamp}_{audio_file.name}"
                with open(audio_filename, "wb") as f:
                    f.write(audio_file.read())

            # Save to CSV
            new_data = {
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "proverb": proverb,
                "meaning": meaning,
                "usage": usage,
                "extra_story": extra_story,
                "audio_path": audio_filename
            }

            if os.path.exists(DATA_FILE):
                df = pd.read_csv(DATA_FILE)
                df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
            else:
                df = pd.DataFrame([new_data])

            df.to_csv(DATA_FILE, index=False)
            st.success("ü•≥ ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞™‡∞Ç‡∞™‡∞ø‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!")

# Display existing proverbs
st.subheader("üìö ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞™‡∞≤‡±ç‡∞≤‡±Ü ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Å")

if os.path.exists(DATA_FILE):
    df = pd.read_csv(DATA_FILE)
    for index, row in df[::-1].iterrows():
        st.markdown(f"### üó£Ô∏è {row['proverb']}")
        st.markdown(f"**‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç:** {row['meaning']}")
        st.markdown(f"**‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£:** _{row['usage']}_")

        if pd.notna(row['extra_story']) and row['extra_story'].strip():
            st.markdown(f"**‡∞á‡∞Ç‡∞ï‡±ä‡∞ï ‡∞Æ‡∞æ‡∞ü ‡∞≤‡±á‡∞¶‡∞æ ‡∞ï‡∞•:** {row['extra_story']}")

        if pd.notna(row['audio_path']) and os.path.exists(row['audio_path']):
            st.audio(row['audio_path'])

        st.markdown("---")
else:
    st.info("‡∞á‡∞Ç‡∞ï‡∞æ ‡∞é‡∞µ‡∞∞‡±Ç ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤‡±Å ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞≤‡±á‡∞¶‡±Å. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Æ‡±ä‡∞¶‡∞ü‡∞ø ‡∞Ö‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø!")

