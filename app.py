import streamlit as st
import os
import json
from datetime import datetime

st.set_page_config(page_title="‡∞™‡∞≤‡±ç‡∞≤‡±Ü ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Å", page_icon="üåæ", layout="centered")

DATA_FILE = "data.json"
UPLOAD_FOLDER = "uploads"

# Create upload folder if not exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# ---------- JSON Backend Functions ----------
def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ---------- Optional: Add Default Data ----------
if not os.path.exists(DATA_FILE):
    default_data = [
        {
            "type": "‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤‡±Å",
            "content": "‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ó‡±ä‡∞°‡±Å‡∞ó‡±Å‡∞≤ ‡∞µ‡∞∞‡±ç‡∞∑‡∞Ç",
            "meaning": "‡∞í‡∞ï‡±á‡∞∏‡∞æ‡∞∞‡∞ø ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞µ‡∞∏‡±ç‡∞§‡±á ‡∞á‡∞≤‡∞æ ‡∞Ö‡∞Ç‡∞ü‡∞æ‡∞∞‡±Å",
            "audio_path": ""
        },
        {
            "type": "‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤‡±Å",
            "content": "‡∞ó‡∞°‡±ç‡∞°‡∞™‡∞∞‡∞ø‡∞ö‡∞ø‡∞® ‡∞™‡∞æ‡∞Æ‡±Å‡∞®‡±Å ‡∞ö‡±Ç‡∞∏‡∞ø ‡∞ö‡±Ä‡∞Æ ‡∞ï‡±Ç‡∞°‡∞æ ‡∞ï‡±ä‡∞∞‡±Å‡∞ï‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø",
            "meaning": "‡∞∂‡∞ï‡±ç‡∞§‡∞ø‡∞®‡∞ø ‡∞ï‡±ã‡∞≤‡±ç‡∞™‡±ã‡∞Ø‡∞ø‡∞® ‡∞µ‡∞æ‡∞∞‡∞ø‡∞®‡∞ø ‡∞Ö‡∞Ç‡∞¶‡∞∞‡±Ç ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å",
            "audio_path": ""
        },
        {
            "type": "‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤‡±Å",
            "content": "‡∞®‡∞ø‡∞®‡±ç‡∞®‡±Å ‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±á ‡∞™‡±ä‡∞ó‡±Å‡∞°‡±Å‡∞ï‡±ã‡∞ï‡∞™‡±ã‡∞§‡±á ‡∞Æ‡∞∞‡±Ü‡∞µ‡∞∞‡±Å ‡∞™‡±ä‡∞ó‡±Å‡∞°‡∞§‡∞æ‡∞∞‡±Å",
            "meaning": "‡∞§‡∞æ‡∞®‡±á‡∞Ç ‡∞ö‡±á‡∞∏‡∞ø‡∞®‡∞æ ‡∞§‡∞æ‡∞®‡±á ‡∞™‡±ä‡∞ó‡∞°‡±Å‡∞ï‡±ã‡∞µ‡∞æ‡∞≤‡∞ø",
            "audio_path": ""
        },
        {
            "type": "‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å‡∞ï‡∞•‡∞≤‡±Å",
            "content": "‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞ï‡∞®‡±ç‡∞®‡±Å‡∞≤‡±Å‡∞®‡±ç‡∞®‡∞æ ‡∞ö‡±Ç‡∞°‡∞≤‡±á‡∞®‡∞ø ‡∞™‡∞æ‡∞™‡∞Ç?",
            "meaning": "‡∞ï‡∞§‡±ç‡∞§‡±Ü‡∞∞",
            "audio_path": ""
        },
        {
            "type": "‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å‡∞ï‡∞•‡∞≤‡±Å",
            "content": "‡∞®‡∞°‡∞ø‡∞ö‡±á ‡∞™‡∞æ‡∞™‡∞æ ‚Äì ‡∞§‡∞≤ ‡∞®‡±Ü‡∞§‡±ç‡∞§‡∞ø‡∞® ‡∞™‡∞æ‡∞≤‡±Å",
            "meaning": "‡∞ö‡∞ø‡∞®‡±ç‡∞® ‡∞µ‡∞Ø‡∞∏‡±Å‡∞≤‡±ã ‡∞™‡±Ü‡∞¶‡±ç‡∞¶ ‡∞¨‡∞æ‡∞ß‡±ç‡∞Ø‡∞§‡∞≤‡±Å ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±Å‡∞®‡±á ‡∞µ‡∞æ‡∞∞‡±Å",
            "audio_path": ""
        }
    ]
    save_data(default_data)

# ---------- UI Starts ----------
st.title("üåæ ‡∞™‡∞≤‡±ç‡∞≤‡±Ü ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Å")
st.markdown("### üôè ‡∞®‡∞Æ‡∞∏‡±ç‡∞§‡±á ‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£ ‡∞™‡±ç‡∞∞‡∞ú‡∞≤‡∞æ‡∞∞‡∞æ! ‡∞Æ‡∞® ‡∞ä‡∞∞‡∞ø ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Ç, ‡∞§‡±Ü‡∞≤‡∞ø‡∞µ‡∞ø ‡∞Æ‡∞æ‡∞ü‡∞≤‡±Ç ‡∞ö‡±Ü‡∞∞‡∞ø‡∞™‡∞ø‡∞™‡±ã‡∞ï‡±Å‡∞Ç‡∞°‡∞æ ‡∞¶‡∞ø‡∞¶‡±ç‡∞¶‡±Å‡∞ï‡±Å‡∞Ç‡∞¶‡∞æ‡∞Ç!")

# ---------- Category Selection ----------
st.subheader("üìÇ ‡∞è‡∞¶‡∞ø ‡∞ö‡±Ç‡∞°‡∞æ‡∞≤‡∞®‡∞ø ‡∞â‡∞Ç‡∞¶‡∞ø?")
category = st.radio("‡∞ï‡±á‡∞ü‡∞ó‡∞ø‡∞∞‡±Ä‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:", ["‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤‡±Å", "‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å‡∞ï‡∞•‡∞≤‡±Å"])

data = load_data()
filtered = [item for item in data if item["type"] == category]

# ---------- Show Proverbs or Riddles ----------
if filtered:
    for item in filtered[::-1]:
        st.markdown(f"### üìù {item['content']}")
        st.markdown(f"**‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç:** {item['meaning']}")
        if item["audio_path"]:
            st.audio(item["audio_path"])
        st.markdown("---")
else:
    st.info("‡∞à ‡∞ï‡±á‡∞ü‡∞ó‡∞ø‡∞∞‡±Ä‡∞≤‡±ã ‡∞á‡∞Ç‡∞ï‡∞æ ‡∞é‡∞Ç‡∞ü‡±ç‡∞∞‡±Ä‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å.")

# ---------- Submission Section ----------
st.markdown("## ‚úçÔ∏è ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡∞æ ‡∞á‡∞Ç‡∞ï‡±ã ‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§ ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å‡∞ï‡∞•?")
with st.expander("‚ûï ‡∞ï‡±ä‡∞§‡±ç‡∞§‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø"):
    new_type = st.selectbox("‡∞µ‡∞∞‡±ç‡∞ó‡∞Ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:", ["‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§‡∞≤‡±Å", "‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å‡∞ï‡∞•‡∞≤‡±Å"])
    new_content = st.text_input("‡∞Æ‡±Ä ‡∞∏‡∞æ‡∞Æ‡±Ü‡∞§ ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å‡∞ï‡∞•:")
    new_meaning = st.text_area("‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã:")
    new_audio = st.file_uploader("‡∞í‡∞ï‡∞µ‡±á‡∞≥ ‡∞Ü‡∞°‡∞ø‡∞Ø‡±ã ‡∞â‡∞Ç‡∞¶‡∞æ? (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)", type=["mp3", "wav", "m4a"])

    if st.button("‡∞ú‡∞Æ‡∞ö‡±á‡∞Ø‡∞ø"):
        if new_content.strip() and new_meaning.strip():
            audio_path = ""
            if new_audio:
                filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{new_audio.name}"
                filepath = os.path.join(UPLOAD_FOLDER, filename)
                with open(filepath, "wb") as f:
                    f.write(new_audio.read())
                audio_path = filepath

            new_entry = {
                "type": new_type,
                "content": new_content.strip(),
                "meaning": new_meaning.strip(),
                "audio_path": audio_path
            }

            data.append(new_entry)
            save_data(data)
            st.success("üëå ‡∞ú‡∞Æ ‡∞Ö‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø! ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£ ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï‡∞ø ‡∞§‡±ã‡∞°‡±ç‡∞™‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å.")
        else:
            st.warning("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å ‡∞™‡±Ç‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")
